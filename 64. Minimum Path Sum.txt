Programming Language: Python

Strategy: Dynamic Programming

Code:

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        """
        length = len(grid)+len(grid[0])-1
        self.ans = float('inf')
        self.dfs([grid[0][0]], 0, 0, grid, length)
        return self.ans
    def dfs(self, path, i, j, grid, length):
        if len(path)==length:
            self.ans = min(self.ans, sum(path))
            return 
        if i < len(grid)-1:
            path.append(grid[i+1][j])
            self.dfs(path, i+1, j, grid, length)
            path.pop()
        if j < len(grid[0])-1:
            path.append(grid[i][j+1])
            self.dfs(path, i, j+1, grid, length)
            path.pop()
        return
        
    """
        m = len(grid)
        n = len(grid[0])
        dp = [[0 for j in range(n)] for i in range(m)]
        #dp[i][j] means the minumum steps it take to go to grid[i][j] fro grid[0][0]
        dp[0][0] = grid[0][0]
        for i in range(1, m):
            dp[i][0] = dp[i-1][0]+grid[i][0]
        for j in range(1, n):
            dp[0][j] = dp[0][j-1]+grid[0][j]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = min(dp[i-1][j], dp[i][j-1])+grid[i][j]
        
        return dp[m-1][n-1]