Programming Language: Python

1. Brute Force

code:


def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        self.global_min = float('inf')
        mem = [0 for i in range(len(nums))]
        mem[len(nums)-1] = 1
        self.count_jump(nums, 0, 0, mem)
        return self.global_min
    
    def count_jump(self, nums, current_pos, count, mem):
        if current_pos == (len(nums))-1:
            if count < self.global_min:
                self.global_min = count
            return
        furthest = min(len(nums)-1, current_pos+nums[current_pos])
        for i in xrange(furthest, current_pos, -1):
            if self.canJumpFromPosition(i, nums, mem):
                self.count_jump(nums, i, count+1, mem)
            
    def canJumpFromPosition(self, position, nums, mem):
        if position == len(nums)-1:
            mem[position] = 1
            return True

        if mem[position] == 1:
            return True
        if mem[position] == 2:
            return False

        furthestJump = min(position + nums[position], len(nums)-1)

        for i in xrange(furthestJump, position, -1):
            if self.canJumpFromPosition(i, nums, mem):
                mem[position] = 1
                mem[i] = 1
                return True
                
        mem[position] = 2
        return False

2. BFS

Code:

#Trying to use BFS to solve the problem
        level = 1
        queue = []
        queue.append(0)
        if len(nums)<2:
            return 0
        while(len(queue)>0):
            length = len(queue)
            for i in range(length):
                holder = queue.pop(0)
                jump_to = min(len(nums)-1, holder+nums[holder])
                if jump_to == len(nums)-1:
                    return level
                for j in range(holder+1, jump_to+1):
                    queue.append(j)
            level += 1

3. Greedy Solution

Programming Language: C++

Code:
int jump(vector<int>& nums) {
        // Greedy Solution
        int current_position = 0;
        int jump = nums[0];
        int max_position;
        int n = nums.size();
        int next_index;
        int result = 1;
        
        if(n<2){
            return 0;
        }
        while(current_position<n-1){
            max_position = 0;
            for(int index = current_position+1; index<=current_position+jump; index++){
                if(index >= n-1){
                    return result;
                }
                if(index+nums[index]>max_position){
                    max_position = index+nums[index];
                    next_index = index;
                }
            }
            current_position = next_index;
            jump = nums[current_position];
            result++;
        }
        return -1;
    }