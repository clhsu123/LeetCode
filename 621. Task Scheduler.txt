Programming Language: Python

Strategy:

This is quite difficult problem if you want to have optimal solution. First, I tried several ideas, using queue and greedy algorithm, where I tried to build sequence symbol by symbol, but it was working very slow and I get TLE. So, I decided to stop coding and to think.

So, what is the main trick? First of all notice, that what is matter, is frequence of each letter, not order.
For each letter we need to evaluate minimum window size we need to fully use this letter. For example, if we have 4 letters A in our tasks and n = 3, then minimum window looks like A...A...A...A. So, the minimum length in this case we need is 13 = (n+1) * 3 + 1. Let us call this number 13 characteristic of letter A. More examples:

If n = 4 and we have BBBBB, than characteristic of letter B is equal to (n+1) * 4 + 1 = 21.
If n = 1 and we have CC, than characteristic of letter C is equal to (n+1) * 1 + 1 = 3.
So, we need to evaluate characteristics of all letters and just choose the maximum one? Similar, but not exaclty. What if we have two letters with the same characteristic (it means they have the same frequencies), like we have AAAABBBB. Then we need to have window A...A...A...A and also window B...B...B...B, and you can not put one inside another. So, in this case we need at least one symbol more, and example will be AB..AB..AB..AB.

In this problem we are asked, what is the minimum number of units we need to use, so, mathematicaly speaking, we need to do two steps:

Estimation: prove, that we need at least say k units.
Give an example for this k units, how to construct desired sequence. (note, that in this problem you do not really ask to create example, but we still need to prove, that it exists).
We already considered Estimation: we need to find elements with the highest characteristic and check how many such elements we have. So, if freq = Counter(tasks) and Most_freq = freq.most_common()[0][1] is the element with highest frequency, than Found_most = sum([freq[key] == Most_freq for key in freq]) is number of such elements and we return max(len(tasks), (Most_freq - 1) * (n + 1) + Found_most), because we can not be shorter than len(tasks).

The most difficult part is to prove that example exists. Let us consider case, where we have AAAA, BBBB, n = 5 and also we have some letters. Then first step is to build:

AB....AB....AB....AB

What we know about other elements? Their frequencies are less than Most_freq = 4. So, let us start to fill dots in special order:

A B 1 4 7 10 A B 2 5 8 11 A B 3 6 9 12 A B

Why we choose this order? Because for any Most_freq - 2 elements with adjacent numbers, places will be at least n elements apart! So all we need to do is to fill elements with frequencies Most_freq - 1 first, and then fill all the other empty places.

There is another case, where (Most_freq - 1) * (n + 1) + Found_most < len(tasks), for example when we have something like AABBCCD, n = 2 In this case we can show that answer should be equal to len(tasks). We again start with most with most common letters and try to form answer. However we can see, that we can not combine properly A.A, B.B and C.C like we did previously, so we combine them as ABCABC. The last step is to insert remaining letters between constructed string. It is not very strict explanation, but I hope it helps.

Complexity: time complexity is O(n), to evaluate freq and one more pass to find all elements with highest frequency. Then we just evaluate answer in constant time. Space complexity is O(26), because there are 26 different letters.

Code:

from collections import Counter

class Solution(object):
    def leastInterval(self, tasks, n):
        """
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """
        # Time complexity O(n)
        # Space complexity O(26)
        
        freq = Counter(tasks)
        Most_freq = freq.most_common()[0][1]
        Found_most = 0
        for key in freq:
            if freq[key] == Most_freq:
                Found_most+=1  
        # A fancy way to find how many elements have the most frequency -> Found_most = sum([freq[key] == Most_freq for key in freq])
        return max(len(tasks), (Most_freq - 1) * (n + 1) + Found_most)