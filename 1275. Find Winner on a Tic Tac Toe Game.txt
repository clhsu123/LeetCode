Programming Language: Python 

Code:

class Solution(object):
    def tictactoe(self, moves):
        """
        :type moves: List[List[int]]
        :rtype: str
        """ 
        board = [ [' ' for i in range(3)]for j in range(3)]
        for i in range(len(moves)):
            if i%2 == 0:
                board[moves[i][0]][moves[i][1]] = 'X'
                if self.is_win(board):
                    return "A"
            else:
                board[moves[i][0]][moves[i][1]] = 'O'
                if self.is_win(board):
                    return "B"
            if not self.find_empty(board):
                return "Draw"
        return "Pending"
    
    def find_empty(self, board):
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == ' ':
                    return True
        return False
    def is_win(self, board):
        for i in range(len(board)):
            if board[i][0] == board[i][1] and board[i][1] == board[i][2] and board[i][0]!=' ':
                return True
        for j in range(len(board[0])):
            if board[0][j] == board[1][j] and board[1][j] == board[2][j] and board[0][j]!=' ':
                return True
        if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0]!=' ':
            return True
        if board[2][0] == board[1][1] and board[1][1] == board[0][2] and board[2][0]!=' ':
            return True

Programming Language: C++

Code:

class Solution {
public:
    string tictactoe(vector<vector<int>>& moves) {
        vector<char> row;
        row.assign(3, ' ');
        vector<vector<char>> board;
        board.assign(3, row);
        for(int i = 0; i<moves.size(); i++){
            if (i%2 == 0){
                board[moves[i][0]][moves[i][1]] = 'X';
                if(is_win(board)){
                    return "A";
                }
            }
            else{
                board[moves[i][0]][moves[i][1]] = 'O';
                if(is_win(board)){
                    return "B";
                }
            }
            if(!find_empty(board)){
                return "Draw";
            }
        }
        return "Pending";
    }
    bool find_empty(vector<vector<char>>& board){
        for(int i=0;i<board.size();i++){
            for(int j=0; j<board[0].size();j++){
                if (board[i][j] == ' '){
                    return true;
                }
            }
        }
        return false;
    }
    bool is_win(vector<vector<char>>& board){
        for(int i=0; i<board.size();i++){
            if(board[i][0] == board[i][1] and board[i][1] == board[i][2] and board[i][0]!=' '){
                return true;
                }
            }
        for(int j=0;j<board[0].size();j++){
            if(board[0][j] == board[1][j] and board[1][j] == board[2][j] and board[0][j]!=' '){
                return true;
        }
            }
        if(board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0]!=' '){
            return true;
            }
        if(board[2][0] == board[1][1] and board[1][1] == board[0][2] and board[2][0]!=' '){
            return true;
            }
        return false;
    }
};