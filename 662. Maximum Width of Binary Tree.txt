Programming Language: C++

Solution: DFS, traverse each node, assign position value to each node and minus the position value of leftmost node in that level

Code:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int max_width = 1;
    map<int, double>::iterator iter;
    map<int, double> leftmost_position;
    int widthOfBinaryTree(TreeNode* root) {
        dfs(root, 0, 0);
        return max_width;
        
    }
    void dfs(TreeNode* root, int level, double position){
        if(root == nullptr){
            return;
        }
        iter = leftmost_position.find(level);
        if(iter!=leftmost_position.end()){
            max_width = find_max(max_width, (position-(iter->second)+1));
        }
        else{
            leftmost_position.insert(pair<int, double>(level, position));
        }
        dfs(root->left, level+1, position*2);
        dfs(root->right, level+1, position*2+1);
        
    }
    int find_max(int a, int b){
        return a>b?a:b;
    }
};