Programming Language: Java

Stack<TreeNode> stack = new Stack<>();
        List<Integer> result = new ArrayList<>();
        
        if (root == null){
            return result;
        }
        
        TreeNode current = root;
        
        while(current != null || !stack.isEmpty()){
            while(current != null){
                stack.push(current);
                current = current.left;
            }
            
            current = stack.pop();
            result.add(current.val);
            current = current.right;
                
        }
        return result;

Programming Language: Python
Solution: Recursion

def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        ans = []
        self.Traverse(root, ans)
        
        return ans
    
    def Traverse(self, root, ans):
        if root == None:
            return
        if root.left == None and root.right == None:
            ans.append(root.val)
            return
        self.Traverse(root.left, ans)
        ans.append(root.val)
        self.Traverse(root.right, ans)