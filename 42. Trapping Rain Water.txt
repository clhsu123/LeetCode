Solution 1: Brute Force

Time Complexity O(n^2)

Code:

water = 0
        for i in range(len(height)):
            left_max = 0
            right_max = 0
            for x in range(i):
                left_max = max(left_max, height[x])
            for y in range(i+1, len(height)):
                right_max = max(right_max, height[y])
            if min(left_max, right_max)>height[i]:
                water += (min(left_max, right_max)-height[i])
        return water

Solution 2: Dynamic Programming

Time Complexiy O(n)

Code:

if height == None or len(height) <3:
            return 0
        size = len(height)
        left_max = [0 for i in range(size)]
        right_max = [0 for i in range(size)]
        ans = 0
        left_max[0] = height[0]
        right_max[size-1] = height[size-1]
        for i in range(1, size):
            left_max[i] = max(left_max[i-1], height[i])
        for i in xrange(size-2, -1, -1):
            right_max[i] = max(right_max[i+1], height[i])
        for i in range(size):
            if min(left_max[i], right_max[i])>height[i]:
                ans += (min(left_max[i], right_max[i]) - height[i])
        return ans