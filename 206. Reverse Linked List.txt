Programming Language: Python

Solution 1:

Code:

def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None:
            return None
        
        data = []
        ans = []
        while(not head == None):
            data.append(head.val)
            head = head.next
        
        for i in xrange(len(data)-1, -1, -1):
            ans.append(data[i])
            
        
        result = ListNode(ans[0])
        tmp = result
        
        for i in xrange(1, len(ans), 1):
            tmp.next = ListNode(0)
            tmp.next.val = ans[i]
            tmp = tmp.next
            
        return result

Solution 2:
(Recursive) [Accepted]
The recursive version is slightly trickier and the key is to work backwards. Assume that the rest of the list had already been reversed, now how do I reverse the front part? Let's assume the list is: n1 → … → nk-1 → nk → nk+1 → … → nm → Ø

Assume from node nk+1 to nm had been reversed and you are at node nk.

n1 → … → nk-1 → nk → nk+1 ← … ← nm

We want nk+1’s next node to point to nk.

So,

nk.next.next = nk;

Be very careful that n1's next must point to Ø. If you forget about this, your linked list has a cycle in it. This bug could be caught if you test your code with a linked list of size 2.

Code:

def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None or head.next == None:
            return head
        
        p = self.reverseList(head.next)
        head.next.next = head
        head.next= None
        
        return p