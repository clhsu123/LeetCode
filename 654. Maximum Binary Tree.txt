Programming Language: Python

Solution: DFS

Code:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def constructMaximumBinaryTree(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        return self.dfs(nums)
    def dfs(self, array):
        if len(array)==1:
            return TreeNode(array[0])
        if len(array) ==0:
            return None
        max_val = max(array)
        root = TreeNode(max_val)
        index = array.index(max_val)
        root.left = self.dfs(array[:index])
        root.right = self.dfs(array[index+1:])
        return root

Programming Language: C++

Solution: DFS

Code:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return dfs(nums);
    }
    
    TreeNode* dfs(vector<int>& array){
        if(array.size()==0){
            return nullptr;
        }
        if(array.size()==1){
            return new TreeNode(array[0]);
        }
        int root_val = max_of_arr(array);
        int index = find_index(array, root_val);
        TreeNode* ptr = new TreeNode(root_val);
        vector<int> new_arr;
        new_arr = slice(array, 0, index-1);
        ptr->left = dfs(new_arr);
        new_arr = slice(array, index+1, array.size()-1);
        ptr->right = dfs(new_arr);
        
        return ptr;
        }
    
    int max_of_arr(vector<int>& array){
        int global_max = INT_MIN;
        for(int i=0; i<array.size();i++){
            global_max = global_max>array[i]?global_max:array[i];
        }
        return global_max;
    }
    
    int find_index(vector<int>& array, int target){
        int ans;
        for(int i=0;i<array.size();i++){
            if(array[i]==target){
                ans=i;
                break;
            }
        }
        return ans;
    }
    
    vector<int> slice(vector<int>& array,int start,int end){
        vector<int> ans;
        for(int i=start;i<=end;i++){
            ans.push_back(array[i]);
        }
        return ans;
    }
    
};